#!/bin/bash

if test x"$1" = x"-h" -o x"$1" = x"--help" ; then
cat <<EOF
Usage: ./configure [options]

Help:
  -h, --help               print this message

Standard options:
  --prefix=PREFIX          install architecture-independent files in PREFIX
                           [/usr/local]
  --exec-prefix=EPREFIX    install architecture-dependent files in EPREFIX
                           [PREFIX]
  --bindir=DIR             install binaries in DIR [EPREFIX/bin]
  --libdir=DIR             install libs in DIR [EPREFIX/lib]
  --includedir=DIR         install includes in DIR [PREFIX/include]
  --extra-asflags=EASFLAGS add EASFLAGS to ASFLAGS
  --extra-cflags=ECFLAGS   add ECFLAGS to CFLAGS
  --extra-ldflags=ELDFLAGS add ELDFLAGS to LDFLAGS
  --extra-rcflags=ERCFLAGS add ERCFLAGS to RCFLAGS

Configuration options:
  --disable-cli            disable cli
  --system-libdavs2        use system libdavs2 instead of internal
  --enable-shared          build shared library
  --disable-static         disable building static library
  --disable-opencl         disable OpenCL features
  --disable-gpl            disable GPL-only features
  --disable-thread         disable multithreaded encoding
  --disable-win32thread    disable win32threads (windows only)
  --disable-interlaced     disable interlaced encoding support
  --bit-depth=BIT_DEPTH    set output bit depth (8-10) [8]
  --chroma-format=FORMAT   output chroma format (420, 422, 444, all) [all]

Advanced options:
  --disable-asm            disable platform-specific assembly optimizations
  --enable-lto             enable link-time optimization
  --enable-debug           add -g
  --enable-gprof           add -pg
  --enable-strip           add -s
  --enable-pic             build position-independent code

Cross-compilation:
  --host=HOST              build programs to run on HOST
  --cross-prefix=PREFIX    use PREFIX for compilation tools
  --sysroot=SYSROOT        root of cross-build tree

EOF
exit 1
fi

log_check() {
    echo -n "checking $1... " >> config.log
}

log_ok() {
    echo "yes" >> config.log
}

log_fail() {
    echo "no" >> config.log
}

log_msg() {
    echo "$1" >> config.log
}

cc_cflags() {
    # several non g++ compilers issue an incredibly large number of warnings on high warning levels,
    # suppress them by reducing the warning level rather than having to use #pragmas
    for arg in $*; do
        [[ "$arg" = -falign-loops* ]] && arg=
        [ "$arg" = -fno-tree-vectorize ] && arg=
        [ "$arg" = -Wshadow ] && arg=
        [ "$arg" = -Wno-maybe-uninitialized ] && arg=
        [[ "$arg" = -mpreferred-stack-boundary* ]] && arg=
        [[ "$arg" = -l* ]] && arg=
        [[ "$arg" = -L* ]] && arg=
        if [ $compiler_style = MS ]; then
            [ "$arg" = -ffast-math ] && arg="-fp:fast"
            [ "$arg" = -Wall ] && arg=
            [ "$arg" = -Werror ] && arg="-W3 -WX"
            [ "$arg" = -g ] && arg=-Z7
            [ "$arg" = -fomit-frame-pointer ] && arg=
            [ "$arg" = -s ] && arg=
            [ "$arg" = -fPIC ] && arg=
        else
            [ "$arg" = -ffast-math ] && arg=
            [ "$arg" = -Wall ] && arg=
            [ "$arg" = -Werror ] && arg="-w3 -Werror"
        fi
        [ $compiler = CL -a "$arg" = -O3 ] && arg=-O2

        [ -n "$arg" ] && echo -n "$arg "
    done
}

cl_ldflags() {
    for arg in $*; do
        arg=${arg/LIBPATH/libpath}
        [ "${arg#-libpath:}" == "$arg" -a "${arg#-l}" != "$arg" ] && arg=${arg#-l}.lib
        [ "${arg#-L}" != "$arg" ] && arg=-libpath:${arg#-L}
        [ "$arg" = -Wl,--large-address-aware ] && arg=-largeaddressaware
        [ "$arg" = -s ] && arg=
        [ "$arg" = -Wl,-Bsymbolic ] && arg=
        [ "$arg" = -fno-tree-vectorize ] && arg=
        [ "$arg" = -Werror ] && arg=
        [ "$arg" = -Wshadow ] && arg=
        [ "$arg" = -Wmaybe-uninitialized ] && arg=
        [[ "$arg" = -Qdiag-error* ]] && arg=

        arg=${arg/pthreadGC/pthreadVC}
        [ "$arg" = avifil32.lib ] && arg=vfw32.lib
        [ "$arg" = gpac_static.lib ] && arg=libgpac_static.lib
        [ "$arg" = davs2.lib ] && arg=libdavs2.lib

        [ -n "$arg" ] && echo -n "$arg "
    done
}

cc_check() {
    if [ -z "$3" ]; then
        if [ -z "$1$2" ]; then
            log_check "whether $CC works"
        elif [ -z "$1" ]; then
            log_check "for $2"
        else
            log_check "for $1"
        fi
    elif [ -z "$1" ]; then
        if [ -z "$2" ]; then
            log_check "whether $CC supports $3"
        else
            log_check "whether $CC supports $3 with $2"
        fi
    else
        log_check "for $3 in $1";
    fi
    rm -f conftest.c
    for arg in $1; do
        echo "#include <$arg>" >> conftest.c
    done
    echo "int main (void) { $3 return 0; }" >> conftest.c
    if [ $compiler_style = MS ]; then
        cc_cmd="$CC conftest.c $(cc_cflags $CFLAGS $CHECK_CFLAGS $2) -link $(cl_ldflags $2 $LDFLAGSCLI $LDFLAGS)"
    else
        cc_cmd="$CC conftest.c $CFLAGS $CHECK_CFLAGS $2 $LDFLAGSCLI $LDFLAGS -o conftest"
    fi
    if $cc_cmd >conftest.log 2>&1; then
        res=$?
        log_ok
    else
        res=$?
        log_fail
        log_msg "Failed commandline was:"
        log_msg "--------------------------------------------------"
        log_msg "$cc_cmd"
        cat conftest.log >> config.log
        log_msg "--------------------------------------------------"
        log_msg "Failed program was:"
        log_msg "--------------------------------------------------"
        cat conftest.c >> config.log
        log_msg "--------------------------------------------------"
    fi
    return $res
}

cpp_check() {
    log_check "whether $3 is true"
    rm -f conftest.c
    for arg in $1; do
        echo "#include <$arg>" >> conftest.c
    done
    echo -e "#if !($3) \n#error $4 \n#endif " >> conftest.c
    if [ $compiler_style = MS ]; then
        cpp_cmd="$CC conftest.c $(cc_cflags $CFLAGS $2) -P"
    else
        cpp_cmd="$CC conftest.c $CFLAGS $2 -E -o conftest"
    fi
    if $cpp_cmd >conftest.log 2>&1; then
        res=$?
        log_ok
    else
        res=$?
        log_fail
        log_msg "--------------------------------------------------"
        cat conftest.log >> config.log
        log_msg "--------------------------------------------------"
        log_msg "Failed program was:"
        log_msg "--------------------------------------------------"
        cat conftest.c >> config.log
        log_msg "--------------------------------------------------"
    fi
    return $res
}

as_check() {
    log_check "whether $AS supports $1"
    echo "$1" > conftest$AS_EXT
    as_cmd="$AS conftest$AS_EXT $ASFLAGS $2 -o conftest.o"
    if $as_cmd >conftest.log 2>&1; then
        res=$?
        log_ok
    else
        res=$?
        log_fail
        log_msg "Failed commandline was:"
        log_msg "--------------------------------------------------"
        log_msg "$as_cmd"
        cat conftest.log >> config.log
        log_msg "--------------------------------------------------"
        log_msg "Failed program was:"
        log_msg "--------------------------------------------------"
        cat conftest$AS_EXT >> config.log
        log_msg "--------------------------------------------------"
    fi
    return $res
}

rc_check() {
    log_check "whether $RC works"
    echo "$1" > conftest.rc
    if [ $compiler = GNU ]; then
        rc_cmd="$RC $RCFLAGS -o conftest.o conftest.rc"
    else
        rc_cmd="$RC $RCFLAGS -foconftest.o conftest.rc"
    fi
    if $rc_cmd >conftest.log 2>&1; then
        res=$?
        log_ok
    else
        res=$?
        log_fail
        log_msg "Failed commandline was:"
        log_msg "--------------------------------------------------"
        log_msg "$rc_cmd"
        cat conftest.log >> config.log
        log_msg "--------------------------------------------------"
        log_msg "Failed program was:"
        log_msg "--------------------------------------------------"
        cat conftest.rc >> config.log
        log_msg "--------------------------------------------------"
    fi
    return $res
}

define() {
    echo "#define $1$([ -n "$2" ] && echo " $2" || echo " 1")" >> config.h
}

die() {
    log_msg "DIED: $@"
    echo "$@"
    exit 1
}

configure_system_override() {
    log_check "system libdavs2 configuration"
    davs2_config_path="$1/davs2_config.h"
    if [ -e "$davs2_config_path" ]; then
        res=$?
        log_ok
        arg="$(grep '#define DAVS2_GPL ' $davs2_config_path | sed -e 's/#define DAVS2_GPL *//; s/ *$//')"
        if [ -n "$arg" ]; then
            [ "$arg" = 0 ] && arg="no" || arg="yes"
            [ "$arg" != "$gpl" ] && die "Incompatible license with system libdavs2"
        fi
        arg="$(grep '#define DAVS2_BIT_DEPTH ' $davs2_config_path | sed -e 's/#define DAVS2_BIT_DEPTH *//; s/ *$//')"
        if [ -n "$arg" ]; then
            if [ "$arg" != "$bit_depth" ]; then
                echo "Override output bit depth with system libdavs2 configuration"
                bit_depth="$arg"
            fi
        fi
        arg="$(grep '#define DAVS2_CHROMA_FORMAT ' $davs2_config_path | sed -e 's/#define DAVS2_CHROMA_FORMAT *//; s/ *$//')"
        if [ -n "$arg" ]; then
            [ "$arg" = 0 ] && arg="all" || arg="${arg#DAVS2_CSP_I}"
            if [ "$arg" != "$chroma_format" ]; then
                echo "Override output chroma format with system libdavs2 configuration"
                chroma_format="$arg"
            fi
        fi
        arg="$(grep '#define DAVS2_INTERLACED ' $davs2_config_path | sed -e 's/#define DAVS2_INTERLACED *//; s/ *$//')"
        if [ -n "$arg" ]; then
            [ "$arg" = 0 ] && arg="no" || arg="yes"
            if [ "$arg" != "$interlaced" ]; then
                echo "Override interlaced encoding support with system libdavs2 configuration"
                interlaced="$arg"
            fi
        fi
    else
        res=$?
        log_fail
        log_msg "Failed search path was: $davs2_config_path"
    fi
    return $res
}

rm -f davs2_config.h config.h config.mak config.log davs2.pc davs2.def conftest*

# Construct a path to the specified directory relative to the working directory
relative_path() {
    local base="${PWD%/}"
    local path="$(cd "$1" >/dev/null; printf '%s/.' "${PWD%/}")"
    local up=''

    while [[ $path != "$base/"* ]]; do
        base="${base%/*}"
        up="../$up"
    done

    dirname "$up${path#"$base/"}"
}

SRCPATH="$(cd ../../source ; pwd)"
[ "$SRCPATH" = "$(pwd)" ] && SRCPATH=.
[ -n "$(echo $SRCPATH | grep ' ')" ] && die "Out of tree builds are impossible with whitespace in source path."

BUILDPATH="$(cd . ; pwd)"

echo "$SRCPATH" | grep -q ' ' && die "Out of tree builds are impossible with whitespace in source path."
echo "$BUILDPATH" | grep -q ' ' && die "Out of tree builds are impossible with whitespace in source path."
[ -e "$BUILDPATH/config.h" -o -e "$BUILDPATH/davs2_config.h" ] && die "Out of tree builds are impossible with config.h/davs2_config.h in source dir."

prefix='/usr/local'
exec_prefix='${prefix}'
bindir='${exec_prefix}/bin'
libdir='${exec_prefix}/lib'
includedir='${prefix}/include'
DEVNULL='/dev/null'

cli="yes"
cli_libdavs2="internal"
shared="no"
static="yes"
gpl="yes"
thread="auto"
asm="auto"
interlaced="yes"
lto="no"
debug="no"
gprof="no"
strip="no"
pic="no"
bit_depth="8"
chroma_format="all"
compiler="GNU"
compiler_style="GNU"
opencl="no"
vsx="auto"

CFLAGS="$CFLAGS -Wall -I. -I\$(SRCPATH)"
LDFLAGS="$LDFLAGS"
LDFLAGSCLI="$LDFLAGSCLI"
ASFLAGS="$ASFLAGS -I. -I\$(SRCPATH)"
RCFLAGS="$RCFLAGS"
CHECK_CFLAGS=""
HAVE_GETOPT_LONG=1
cross_prefix=""

EXE=""
AS_EXT=".S"
NL="
"

# list of all preprocessor HAVE values we can define
CONFIG_HAVE="MALLOC_H ALTIVEC ALTIVEC_H MMX ARMV6 ARMV6T2 NEON BEOSTHREAD POSIXTHREAD WIN32THREAD THREAD LOG2F \
             GPL VECTOREXT INTERLACED CPU_COUNT OPENCL THP X86_INLINE_ASM AS_FUNC INTEL_DISPATCHER \
             MSA MMAP WINRT VSX"

# parse options

for opt do
    optarg="${opt#*=}"
    case "$opt" in
        --prefix=*)
            prefix="$optarg"
            ;;
        --exec-prefix=*)
            exec_prefix="$optarg"
            ;;
        --bindir=*)
            bindir="$optarg"
            ;;
        --libdir=*)
            libdir="$optarg"
            ;;
        --includedir=*)
            includedir="$optarg"
            ;;
        --disable-cli)
            cli="no"
            ;;
        --system-libdavs2)
            cli_libdavs2="system"
            ;;
        --enable-shared)
            shared="yes"
            ;;
        --disable-static)
            static="no"
            ;;
        --disable-asm)
            asm="no"
            ;;
        --disable-interlaced)
            interlaced="no"
            ;;
        --disable-gpl)
            gpl="no"
            ;;
        --extra-asflags=*)
            ASFLAGS="$ASFLAGS $optarg"
            ;;
        --extra-cflags=*)
            CFLAGS="$CFLAGS $optarg"
            ;;
        --extra-ldflags=*)
            LDFLAGS="$LDFLAGS $optarg"
            ;;
        --extra-rcflags=*)
            RCFLAGS="$RCFLAGS $optarg"
            ;;
        --disable-thread)
            thread="no"
            ;;
        --disable-win32thread)
            [ "$thread" != "no" ] && thread="posix"
            ;;
        --enable-lto)
            lto="auto"
            ;;
        --enable-debug)
            debug="yes"
            ;;
        --enable-gprof)
            CFLAGS="$CFLAGS -pg"
            LDFLAGS="$LDFLAGS -pg"
            gprof="yes"
            ;;
        --enable-strip)
            strip="yes"
            ;;
        --enable-pic)
            pic="yes"
            ;;
        --host=*)
            host="$optarg"
            ;;
        --disable-vsx)
            vsx="no"
            ;;
        --disable-opencl)
            opencl="no"
            ;;
        --cross-prefix=*)
            cross_prefix="$optarg"
            ;;
        --sysroot=*)
            CFLAGS="$CFLAGS --sysroot=$optarg"
            LDFLAGS="$LDFLAGS --sysroot=$optarg"
            ;;
        --bit-depth=*)
            bit_depth="$optarg"
            if [ "$bit_depth" -lt "8" -o "$bit_depth" -gt "10" ]; then
                echo "Supplied bit depth must be in range [8,10]."
                exit 1
            elif [[ "$bit_depth" = "9" || "$bit_depth" = "10" ]]; then
                echo "BitDepth $bit_depth not supported currently."
                exit 1
            fi
            bit_depth=`expr $bit_depth + 0`
            ;;
        --chroma-format=*)
            chroma_format="$optarg"
            if [ $chroma_format != "420" -a $chroma_format != "422" -a $chroma_format != "444" -a $chroma_format != "all" ]; then
                echo "Supplied chroma format must be 420, 422, 444 or all."
                exit 1
            fi
            ;;
        *)
            echo "Unknown option $opt, ignored"
            ;;
    esac
done

[ "$cli" = "no" -a "$shared" = "no" -a "$static" = "no" ] && die "Nothing to build. Enable cli, shared or static."

CC="${CC-${cross_prefix}g++}"
STRIP="${STRIP-${cross_prefix}strip}"
INSTALL="${INSTALL-install}"
PKGCONFIG="${PKGCONFIG-${cross_prefix}pkg-config}"

# ar and ranlib doesn't load the LTO plugin by default, prefer the g++-prefixed wrappers which does.
if ${cross_prefix}g++-ar --version >/dev/null 2>&1; then
    AR="${AR-${cross_prefix}g++-ar}"
else
    AR="${AR-${cross_prefix}ar}"
fi
if ${cross_prefix}g++-ranlib --version >/dev/null 2>&1; then
    RANLIB="${RANLIB-${cross_prefix}g++-ranlib}"
else
    RANLIB="${RANLIB-${cross_prefix}ranlib}"
fi

if [ "x$host" = x ]; then
    host=`${BUILDPATH}/config.guess`
fi
# normalize a triplet into a quadruplet
host=`${BUILDPATH}/config.sub $host`

# split $host
host_cpu="${host%%-*}"
host="${host#*-}"
host_vendor="${host%%-*}"
host_os="${host#*-}"

trap 'rm -f conftest*' EXIT

# test for use of compilers that require specific handling
cc_base=`basename "$CC"`
QPRE="-"
if [[ $host_os = mingw* || $host_os = cygwin* ]]; then
    if [[ "$cc_base" = icl || "$cc_base" = icl[\ .]* ]]; then
        # Windows Intel Compiler creates dependency generation with absolute Windows paths, Cygwin's make does not support Windows paths.
        [[ $host_os = cygwin* ]] && die "Windows Intel Compiler support requires MSYS"
        compiler=ICL
        compiler_style=MS
        CFLAGS="$CFLAGS -Qstd=c99 -nologo -Qms0 -DHAVE_STRING_H -I\$(SRCPATH)/extras"
        QPRE="-Q"
        `$CC 2>&1 | grep -q IA-32` && host_cpu=i486
        `$CC 2>&1 | grep -q "Intel(R) 64"` && host_cpu=x86_64
        cpp_check "" "" "_MSC_VER >= 1400" || die "Windows Intel Compiler support requires Visual Studio 2005 or newer"
        if cc_check '' -Qdiag-error:10006,10157 ; then
            CHECK_CFLAGS="$CHECK_CFLAGS -Qdiag-error:10006,10157"
        fi
    elif [[ "$cc_base" = cl || "$cc_base" = cl[\ .]* ]]; then
        # Standard Microsoft Visual Studio
        compiler=CL
        compiler_style=MS
        CFLAGS="$CFLAGS -nologo -GS- -DHAVE_STRING_H -I\$(SRCPATH)/extras"
        `$CC 2>&1 | grep -q 'x86'` && host_cpu=i486
        `$CC 2>&1 | grep -q 'x64'` && host_cpu=x86_64
        cpp_check '' '' '_MSC_VER > 1800 || (_MSC_VER == 1800 && _MSC_FULL_VER >= 180030324)' || die "Microsoft Visual Studio support requires Visual Studio 2013 Update 2 or newer"
    else
        # MinGW uses broken pre-VS2015 Microsoft printf functions unless it's told to use the POSIX ones.
        CFLAGS="$CFLAGS -D_POSIX_C_SOURCE=200112L"
    fi
else
    if [[ "$cc_base" = icc || "$cc_base" = icc[\ .]* ]]; then
        AR="xiar"
        compiler=ICC
    fi
fi

if [[ "$cc_base" = clang* ]]; then
    if cc_check '' -Werror=unknown-warning-option ; then
        CHECK_CFLAGS="$CHECK_CFLAGS -Werror=unknown-warning-option"
    fi
fi

libm=""
case $host_os in
    beos*)
        SYS="BEOS"
        define HAVE_MALLOC_H
        ;;
    darwin*)
        SYS="MACOSX"
        libm="-lm"
        if [ "$pic" = "no" ]; then
            cc_check "" -mdynamic-no-pic && CFLAGS="$CFLAGS -mdynamic-no-pic"
        fi
        # TODO: Fix compiling error under mac osx (force disabled now)
        asm="no"
        ;;
    freebsd*)
        SYS="FREEBSD"
        libm="-lm"
        ;;
    kfreebsd*-gnu)
        SYS="FREEBSD"
        define HAVE_MALLOC_H
        libm="-lm"
        ;;
    netbsd*)
        SYS="NETBSD"
        libm="-lm"
        ;;
    openbsd*)
        SYS="OPENBSD"
        libm="-lm"
        ;;
    *linux*)
        SYS="LINUX"
        define HAVE_MALLOC_H
        libm="-lm"
        ;;
    gnu*)
        SYS="HURD"
        define HAVE_MALLOC_H
        libm="-lm"
        ;;
    cygwin*|mingw*|msys*)
        EXE=".exe"
        if [[ $host_os = cygwin* ]] && cpp_check "" "" "defined(__CYGWIN__)" ; then
            SYS="CYGWIN"
            define HAVE_MALLOC_H
        else
            SYS="WINDOWS"
            DEVNULL="NUL"
            LDFLAGSCLI="$LDFLAGSCLI -lshell32"
            [ $compiler = GNU ] && RC="${RC-${cross_prefix}windres}" || RC="${RC-rc}"
        fi
        ;;
    sunos*|solaris*)
        SYS="SunOS"
        define HAVE_MALLOC_H
        libm="-lm"
        if cc_check "" /usr/lib/64/values-xpg6.o; then
            LDFLAGS="$LDFLAGS /usr/lib/64/values-xpg6.o"
        else
            LDFLAGS="$LDFLAGS /usr/lib/values-xpg6.o"
        fi
        if test -x /usr/ucb/install ; then
            INSTALL=/usr/ucb/install
        elif test -x /usr/bin/ginstall ; then
            # OpenSolaris
            INSTALL=/usr/bin/ginstall
        elif test -x /usr/gnu/bin/install ; then
            # OpenSolaris
            INSTALL=/usr/gnu/bin/install
        fi
        HAVE_GETOPT_LONG=0
        ;;
    *qnx*)
        SYS="QNX"
        define HAVE_MALLOC_H
        libm="-lm"
        HAVE_GETOPT_LONG=0
        CFLAGS="$CFLAGS -I\$(SRCPATH)/extras"
        ;;
    *haiku*)
        SYS="HAIKU"
        ;;
    *)
        die "Unknown system $host, edit the configure"
        ;;
esac

LDFLAGS="$LDFLAGS $libm"

stack_alignment=4
case $host_cpu in
    i*86)
        ARCH="X86"
        AS="${AS-nasm}"
        AS_EXT=".asm"
        CFLAGS="$CFLAGS -DARCH_X86_64=0"
        ASFLAGS="$ASFLAGS -DARCH_X86_64=0 -I\$(SRCPATH)/common/x86/"
        if [ $compiler = GNU ]; then
            if [[ "$asm" == auto && "$CFLAGS" != *-march* ]]; then
                CFLAGS="$CFLAGS -march=i686"
            fi
            if [[ "$asm" == auto && "$CFLAGS" != *-mfpmath* ]]; then
                CFLAGS="$CFLAGS -mfpmath=sse -msse -msse2"
            fi
            CFLAGS="-m32 $CFLAGS"
            LDFLAGS="-m32 $LDFLAGS"
        fi
        if [ "$SYS" = MACOSX ]; then
            ASFLAGS="$ASFLAGS -f macho32 -DPREFIX"
        elif [ "$SYS" = WINDOWS -o "$SYS" = CYGWIN ]; then
            ASFLAGS="$ASFLAGS -f win32 -DPREFIX"
            LDFLAGS="$LDFLAGS -Wl,--large-address-aware"
            [ $compiler = GNU ] && LDFLAGS="$LDFLAGS -Wl,--dynamicbase,--nxcompat,--tsaware"
            [ $compiler = GNU ] && RCFLAGS="--target=pe-i386 $RCFLAGS"
        else
            ASFLAGS="$ASFLAGS -f elf32"
        fi
        ;;
    x86_64)
        ARCH="X86_64"
        AS="${AS-nasm}"
        AS_EXT=".asm"
        CFLAGS="$CFLAGS -DARCH_X86_64=1"
        ASFLAGS="$ASFLAGS -DARCH_X86_64=1 -I\$(SRCPATH)/common/x86/"
        stack_alignment=16
        [ $compiler = GNU ] && CFLAGS="-m64 $CFLAGS" && LDFLAGS="-m64 $LDFLAGS"
        if [ "$SYS" = MACOSX ]; then
            ASFLAGS="$ASFLAGS -f macho64 -DPIC -DPREFIX"
            if cc_check '' "-arch x86_64"; then
                CFLAGS="$CFLAGS -arch x86_64"
                LDFLAGS="$LDFLAGS -arch x86_64"
            fi
        elif [ "$SYS" = WINDOWS -o "$SYS" = CYGWIN ]; then
            ASFLAGS="$ASFLAGS -f win64"
            if [ $compiler = GNU ]; then
                # only the GNU toolchain is inconsistent in prefixing function names with _
                cc_check "" "-S" && grep -q "_main:" conftest && ASFLAGS="$ASFLAGS -DPREFIX"
                cc_check "" "-Wl,--high-entropy-va" && LDFLAGS="$LDFLAGS -Wl,--high-entropy-va"
                LDFLAGS="$LDFLAGS -Wl,--dynamicbase,--nxcompat,--tsaware"
                LDFLAGSCLI="$LDFLAGSCLI -Wl,--image-base,0x140000000"
                SOFLAGS="$SOFLAGS -Wl,--image-base,0x180000000"
                RCFLAGS="--target=pe-x86-64 $RCFLAGS"
            fi
        else
            ASFLAGS="$ASFLAGS -f elf64"
        fi
        ;;
    powerpc*)
        ARCH="PPC"
        if [ $asm = auto ] ; then
            define HAVE_ALTIVEC
            AS="${AS-${CC}}"
            AS_EXT=".c"
            if [ $SYS = MACOSX ] ; then
                CFLAGS="$CFLAGS -faltivec -fastf -mcpu=G4"
            else
                CFLAGS="$CFLAGS -maltivec -mabi=altivec"
                define HAVE_ALTIVEC_H
            fi
            if [ "$vsx" != "no" ] ; then
                vsx="no"
                if cc_check "" "-mvsx" ; then
                    CFLAGS="$CFLAGS -mvsx"
                    define HAVE_VSX
                    vsx="yes"
                fi
            fi
        fi
        ;;
    sparc)
        ARCH="SPARC"
        ;;
    mips*)
        ARCH="MIPS"
        AS="${AS-${CC}}"
        AS_EXT=".c"
        ;;
    arm*)
        ARCH="ARM"
        if [ "$SYS" = MACOSX ] ; then
            AS="${AS-${SRCPATH}/tools/gas-preprocessor.pl -arch arm -- ${CC}}"
            ASFLAGS="$ASFLAGS -DPREFIX -DPIC"  # apple's ld doesn't support movw/movt relocations at all
            # build for armv7 by default
            if ! echo $CFLAGS | grep -Eq '\-arch' ; then
                CFLAGS="$CFLAGS -arch armv7"
                LDFLAGS="$LDFLAGS -arch armv7"
            fi
        else
            AS="${AS-${CC}}"
        fi
        ;;
    aarch64)
        ARCH="AARCH64"
        stack_alignment=16
        if [ "$SYS" = MACOSX ] ; then
            AS="${AS-${SRCPATH}/tools/gas-preprocessor.pl -arch aarch64 -- ${CC}}"
            ASFLAGS="$ASFLAGS -DPREFIX"
        else
            AS="${AS-${CC}}"
        fi
        ;;
    s390|s390x)
        ARCH="S390"
        ;;
    hppa*|parisc*)
        ARCH="PARISC"
        ;;
    ia64)
        ARCH="IA64"
        ;;
    alpha*)
        ARCH="ALPHA"
        ;;
    *)
        ARCH="$(echo $host_cpu | tr a-z A-Z)"
        ;;
esac

[ "$vsx" != "yes" ] && vsx="no"

if [ $SYS = WINDOWS ]; then
    if ! rc_check "0 RCDATA {0}" ; then
        RC=""
    fi

    if cpp_check "winapifamily.h" "" "!WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)" ; then
        [ $compiler = CL ] || die "WinRT requires MSVC"
        define HAVE_WINRT
        CFLAGS="$CFLAGS -MD"
        LDFLAGS="$LDFLAGS -appcontainer"
        if ! cpp_check "" "" "defined(_WIN32_WINNT) && _WIN32_WINNT >= 0x0603" ; then
            die "_WIN32_WINNT must be defined to at least 0x0603 (Windows 8.1) for WinRT"
        elif cpp_check "" "" "_WIN32_WINNT >= 0x0A00" ; then
            # Universal Windows Platform (Windows 10)
            LDFLAGS="$LDFLAGS -lWindowsApp"
        fi
        cli="no"
        opencl="no"
    fi
fi

log_msg "davs2 configure script"
if [ -n "$*" ]; then
    msg="Command line options:"
    for i in $@; do
        msg="$msg \"$i\""
    done
    log_msg "$msg"
fi
log_msg ""

# check requirements

cc_check || die "No working C compiler found."

if [ $compiler_style = GNU ]; then
    if cc_check '' -std=gnu++11 'for( int i = 0; i < 9; i++ );' ; then
        CFLAGS="$CFLAGS -std=gnu++11 -D_GNU_SOURCE"
    elif ! cc_check '' '' 'for( int i = 0; i < 9; i++ );' ; then
        die "GNU++11 compiler is needed for compilation."
    fi
fi

if [ $shared = yes -a \( $ARCH = "X86_64" -o $ARCH = "PPC" -o $ARCH = "ALPHA" -o $ARCH = "ARM" -o $ARCH = "IA64" -o $ARCH = "PARISC" -o $ARCH = "MIPS" -o $ARCH = "AARCH64" \) ] ; then
    pic="yes"
fi

if [ $compiler = GNU -a \( $ARCH = X86 -o $ARCH = X86_64 \) ] ; then
    if cc_check '' -mpreferred-stack-boundary=5 ; then
        CFLAGS="$CFLAGS -mpreferred-stack-boundary=5"
        stack_alignment=32
    elif [ $stack_alignment -lt 16 ] && cc_check '' -mpreferred-stack-boundary=4 ; then
        CFLAGS="$CFLAGS -mpreferred-stack-boundary=4"
        stack_alignment=16
    fi
elif [ $compiler = ICC -a $ARCH = X86 ]; then
    # icc on linux has various degrees of mod16 stack support
    if [ $SYS = LINUX ]; then
        # >= 12 defaults to a mod16 stack
        if cpp_check "" "" "__INTEL_COMPILER >= 1200" ; then
            stack_alignment=16
        # 11 <= x < 12 is capable of keeping a mod16 stack, but defaults to not doing so.
        elif cpp_check "" "" "__INTEL_COMPILER >= 1100" ; then
            CFLAGS="$CFLAGS -falign-stack=assume-16-byte"
            stack_alignment=16
        fi
        # < 11 is completely incapable of keeping a mod16 stack
    fi
fi

if [ $asm = auto -a \( $ARCH = X86 -o $ARCH = X86_64 \) ] ; then
    if ! as_check "vmovdqa32 [eax]{k1}{z}, zmm0" ; then
        VER="$(($AS --version || echo no assembler) 2>/dev/null | head -n 1)"
        echo "Found $VER"
        echo "Minimum version is nasm-2.13"
        echo "If you really want to compile without asm, configure with --disable-asm."
        exit 1
    fi
    cc_check '' '' '__asm__("pabsw %xmm0, %xmm0");' && define HAVE_X86_INLINE_ASM
    ASFLAGS="$ASFLAGS -Worphan-labels"
    define HAVE_MMX
fi

if [ $asm = auto -a $ARCH = ARM ] ; then
    # set flags so neon is built by default
    echo $CFLAGS | grep -Eq '(-mcpu|-march|-mfpu)' || CFLAGS="$CFLAGS -mcpu=cortex-a8 -mfpu=neon"

    if  cc_check '' '' '__asm__("rev ip, ip");' ; then      define HAVE_ARMV6
        cc_check '' '' '__asm__("movt r0, #0");'         && define HAVE_ARMV6T2
        cc_check '' '' '__asm__("vadd.i16 q0, q0, q0");' && define HAVE_NEON
        ASFLAGS="$ASFLAGS -c"
    else
        echo "You specified a pre-ARMv6 or Thumb-1 CPU in your CFLAGS."
        echo "If you really want to run on such a CPU, configure with --disable-asm."
        exit 1
    fi
fi

if [ $asm = auto -a $ARCH = AARCH64 ] ; then
    if  cc_check '' '' '__asm__("cmeq v0.8h, v0.8h, #0");' ; then define HAVE_NEON
        ASFLAGS="$ASFLAGS -c"
    else
        echo "no NEON support, try adding -mfpu=neon to CFLAGS"
        echo "If you really want to run on such a CPU, configure with --disable-asm."
        exit 1
    fi
fi

if [ $asm = auto -a \( $ARCH = ARM -o $ARCH = AARCH64 \) ] ; then
    # check if the assembler supports '.func' (clang 3.5 does not)
    as_check ".func test${NL}.endfunc" && define HAVE_AS_FUNC 1
fi

if [ $asm = auto -a $ARCH = MIPS ] ; then
    if ! echo $CFLAGS | grep -Eq '(-march|-mmsa|-mno-msa)' ; then
        cc_check '' '-mmsa -mfp64 -mhard-float' && CFLAGS="-mmsa -mfp64 -mhard-float $CFLAGS"
    fi

    if cc_check '' '' '__asm__("addvi.b $w0, $w1, 1");' ; then
        define HAVE_MSA
    else
        echo "You specified a pre-MSA CPU in your CFLAGS."
        echo "If you really want to run on such a CPU, configure with --disable-asm."
        exit 1
    fi
fi

[ $asm = no ] && AS=""
[ "x$AS" = x ] && asm="no" || asm="yes"

define ARCH_$ARCH
define SYS_$SYS

define STACK_ALIGNMENT $stack_alignment
ASFLAGS="$ASFLAGS -DSTACK_ALIGNMENT=$stack_alignment"

# skip endianness check for Intel Compiler and MSVS, as all supported platforms are little. each have flags that will cause the check to fail as well
CPU_ENDIAN="little-endian"
if [ $compiler = GNU ]; then
    echo "int i[2] = {0x42494745,0}; double f[2] = {0x1.0656e6469616ep+102,0};" > conftest.c
    $CC $CFLAGS conftest.c -c -o conftest.o 2>/dev/null || die "endian test failed"
    if (${cross_prefix}strings -a conftest.o | grep -q BIGE) && (${cross_prefix}strings -a conftest.o | grep -q FPendian) ; then
        define WORDS_BIGENDIAN
        CPU_ENDIAN="big-endian"
    elif !(${cross_prefix}strings -a conftest.o | grep -q EGIB && ${cross_prefix}strings -a conftest.o | grep -q naidnePF) ; then
        die "endian test failed"
    fi
fi

if [ "$cli_libdavs2" = "system" -a "$shared" != "yes" ] ; then
    [ "$static" = "yes" ] && die "Option --system-libdavs2 can not be used together with --enable-static"
    if $PKGCONFIG --exists davs2 2>/dev/null; then
        DAVS2_LIBS="$($PKGCONFIG --libs davs2)"
        DAVS2_INCLUDE_DIR="${DAVS2_INCLUDE_DIR-$($PKGCONFIG --variable=includedir davs2)}"
        configure_system_override "$DAVS2_INCLUDE_DIR" || die "Detection of system libdavs2 configuration failed"
    else
        die "Can not find system libdavs2"
    fi
fi

# autodetect options that weren't forced nor disabled

libpthread=""
if [ "$SYS" = "WINDOWS" -a "$thread" = "posix" ] ; then
    if [ "$gpl" = "no" ] ; then
        echo "Warning: pthread-win32 is LGPL and is therefore not supported with --disable-gpl"
        thread="no"
    elif cc_check pthread.h -lpthread "pthread_create(0,0,0,0);" ; then
        libpthread="-lpthread"
    elif cc_check pthread.h -lpthreadGC2 "pthread_create(0,0,0,0);" ; then
        libpthread="-lpthreadGC2"
    elif cc_check pthread.h "-lpthreadGC2 -lwsock32 -DPTW32_STATIC_LIB" "pthread_create(0,0,0,0);" ; then
        libpthread="-lpthreadGC2 -lwsock32"
        define PTW32_STATIC_LIB
    elif cc_check pthread.h "-lpthreadGC2 -lws2_32 -DPTW32_STATIC_LIB" "pthread_create(0,0,0,0);" ; then
        libpthread="-lpthreadGC2 -lws2_32"
        define PTW32_STATIC_LIB
    else
        thread="no"
    fi
elif [ "$thread" != "no" ] ; then
    thread="no"
    case $SYS in
        BEOS)
            thread="beos"
            define HAVE_BEOSTHREAD
            ;;
        WINDOWS)
            thread="win32"
            define HAVE_WIN32THREAD
            ;;
        QNX)
            cc_check pthread.h -lc "pthread_create(0,0,0,0);" && thread="posix" && libpthread="-lc"
            ;;
        *)
            if cc_check pthread.h -lpthread "pthread_create(0,0,0,0);" ; then
               thread="posix"
               libpthread="-lpthread"
            else
                cc_check pthread.h "" "pthread_create(0,0,0,0);" && thread="posix" && libpthread=""
            fi
            ;;
    esac
fi
if [ "$thread" = "posix" ]; then
    LDFLAGS="$LDFLAGS $libpthread"
    define HAVE_POSIXTHREAD
    if [ "$SYS" = "LINUX" ] && cc_check sched.h "-D_GNU_SOURCE -Werror" "cpu_set_t p_aff; return CPU_COUNT(&p_aff);" ; then
        define HAVE_CPU_COUNT
    fi
fi
[ "$thread" != "no" ] && define HAVE_THREAD

if cc_check "math.h" "-Werror" "return log2f(2);" ; then
    define HAVE_LOG2F
fi

if [ "$SYS" != "WINDOWS" ] && cpp_check "sys/mman.h unistd.h" "" "defined(MAP_PRIVATE)"; then
    define HAVE_MMAP
fi

if [ "$SYS" = "LINUX" -a \( "$ARCH" = "X86" -o "$ARCH" = "X86_64" \) ] && cc_check "sys/mman.h" "" "MADV_HUGEPAGE;" ; then
    define HAVE_THP
fi

cc_check "stdint.h" "" "uint32_t test_vec __attribute__ ((vector_size (16))) = {0,1,2,3};" && define HAVE_VECTOREXT

if [ "$pic" = "yes" ] ; then
    [ "$SYS" != WINDOWS -a "$SYS" != CYGWIN ] && CFLAGS="$CFLAGS -fPIC"
    ASFLAGS="$ASFLAGS -DPIC"
    # resolve textrels in the x86 asm
    cc_check stdio.h "-shared -Wl,-Bsymbolic" && SOFLAGS="$SOFLAGS -Wl,-Bsymbolic"
    [ $SYS = SunOS -a "$ARCH" = "X86" ] && SOFLAGS="$SOFLAGS -mimpure-text"
fi

if [ "$debug" != "yes" -a "$gprof" != "yes" ]; then
    CFLAGS="$CFLAGS -fomit-frame-pointer"
fi

if [ "$strip" = "yes" ]; then
    LDFLAGS="$LDFLAGS -s"
fi

if [ "$debug" = "yes" ]; then
    CFLAGS="-O1 -g $CFLAGS"
    RCFLAGS="$RCFLAGS -DDEBUG"
else
    CFLAGS="-O3 -ffast-math $CFLAGS"
    if [ "$lto" = "auto" ] && [ $compiler = GNU ] && cc_check "" "-flto" ; then
        lto="yes"
        CFLAGS="$CFLAGS -flto"
        LDFLAGS="$LDFLAGS -O3 -flto"
    fi
fi
[ "$lto" = "auto" ] && lto="no"

if cc_check '' -fno-tree-vectorize ; then
    CFLAGS="$CFLAGS -fno-tree-vectorize"
fi

if [ $SYS = WINDOWS -a $ARCH = X86 -a $compiler = GNU ] ; then
    # workaround g++/ld bug with alignment of static variables/arrays that are initialized to zero
    cc_check '' -fno-zero-initialized-in-bss && CFLAGS="$CFLAGS -fno-zero-initialized-in-bss"
fi

if cc_check '' -Wshadow ; then
    CFLAGS="-Wshadow $CFLAGS"
fi

if cc_check '' -Wmaybe-uninitialized ; then
    if [ $SYS = MACOSX ] ; then
        CFLAGS="-Wno-uninitialized $CFLAGS"
    else
        CFLAGS="-Wno-maybe-uninitialized $CFLAGS"
    fi
fi

if [ $compiler = ICC -o $compiler = ICL ] ; then
    if cc_check 'extras/intel_dispatcher.h' '' 'davs2_intel_dispatcher_override();' ; then
        define HAVE_INTEL_DISPATCHER
    fi
fi

if [ "$bit_depth" -gt "8" ]; then
    define HIGH_BIT_DEPTH
    ASFLAGS="$ASFLAGS -DHIGH_BIT_DEPTH=1"
    CFLAGS+=" -DHIGH_BIT_DEPTH=1"
    opencl="no"
else
    ASFLAGS="$ASFLAGS -DHIGH_BIT_DEPTH=0"
    CFLAGS+=" -DHIGH_BIT_DEPTH=0"
fi

if [ "$chroma_format" != "all" ]; then
    define CHROMA_FORMAT CHROMA_$chroma_format
fi

ASFLAGS="$ASFLAGS -DBIT_DEPTH=$bit_depth"
CFLAGS+=" -DBIT_DEPTH=$bit_depth"

[ $gpl = yes ] && define HAVE_GPL && davs2_gpl=1 || davs2_gpl=0

[ $interlaced = yes ] && define HAVE_INTERLACED && davs2_interlaced=1 || davs2_interlaced=0

libdl=""
if [ "$opencl" = "yes" ]; then
    opencl="no"
    # cygwin can use opencl if it can use LoadLibrary
    if [ $SYS = WINDOWS ] || ([ $SYS = CYGWIN ] && cc_check windows.h "" "LoadLibraryW(0);") ; then
        opencl="yes"
        define HAVE_OPENCL
    elif [ "$SYS" = "LINUX" -o "$SYS" = "MACOSX" ] ; then
        opencl="yes"
        define HAVE_OPENCL
        libdl="-ldl"
    fi
    LDFLAGS="$LDFLAGS $libdl"
fi

#define undefined vars as 0
for var in $CONFIG_HAVE; do
    grep -q "HAVE_$var 1" config.h || define HAVE_$var 0
done

# generate exported config file

config_chroma_format="DAVS2_CSP_I$chroma_format"
[ "$config_chroma_format" == "DAVS2_CSP_Iall" ] && config_chroma_format="0"
cat > davs2_config.h << EOF
#define DAVS2_BIT_DEPTH     $bit_depth
#define DAVS2_GPL           $davs2_gpl
#define DAVS2_INTERLACED    $davs2_interlaced
#define DAVS2_CHROMA_FORMAT $config_chroma_format
EOF

# generate version.h
cd ${SRCPATH}/..
./version.sh >> ${BUILDPATH}/davs2_config.h
cd ${BUILDPATH}

if [ "$cli_libdavs2" = "system" ] ; then
    if [ "$shared" = "yes" ]; then
        CLI_LIBDAVS2='$(SONAME)'
    else
        CLI_LIBDAVS2=
        LDFLAGSCLI="$DAVS2_LIBS $LDFLAGSCLI"
        cc_check 'stdint.h davs2.h' '' 'davs2_encoder_open(0);' || die "System libdavs2 can't be used for compilation of this version"
    fi
else
    CLI_LIBDAVS2='$(LIBDAVS2)'
fi

DEPMM="${QPRE}MM"
DEPMT="${QPRE}MT"
if [ $compiler_style = MS ]; then
    AR="lib -nologo -out:"
    LD="link -out:"
    if [ $compiler = ICL ]; then
        AR="xi$AR"
        LD="xi$LD"
    else
        mslink="$(dirname "$(command -v cl 2>/dev/null)")/link"
        [ -x "$mslink" ] && LD="\"$mslink\" -out:"
    fi
    HAVE_GETOPT_LONG=0
    LDFLAGS="-nologo -incremental:no $(cl_ldflags $LDFLAGS)"
    LDFLAGSCLI="$(cl_ldflags $LDFLAGSCLI)"
    LIBDAVS2=libdavs2.lib
    RANLIB=
    [ -n "$RC" ] && RCFLAGS="$RCFLAGS -nologo -I. -I\$(SRCPATH)/extras -fo"
    STRIP=
    if [ $debug = yes ]; then
        LDFLAGS="-debug $LDFLAGS"
        CFLAGS="-D_DEBUG $CFLAGS"
    else
        CFLAGS="-DNDEBUG $CFLAGS"
    fi
else # g++/icc
    DEPMM="$DEPMM -g0"
    AR="$AR rc "
    LD="$CC -o "
    LIBDAVS2=libdavs2.a
    [ -n "$RC" ] && RCFLAGS="$RCFLAGS -I. -o "
fi
[ $compiler != GNU ] && CFLAGS="$(cc_cflags $CFLAGS)"
if [ $compiler = ICC -o $compiler = ICL ]; then
    # icc does not define __SSE__ until SSE2 optimization and icl never defines it or _M_IX86_FP
    [ \( $ARCH = X86_64 -o $ARCH = X86 \) -a $asm = yes ] && ! cpp_check "" "" "defined(__SSE__)" && define __SSE__
    PROF_GEN_CC="${QPRE}prof-gen ${QPRE}prof-dir."
    PROF_GEN_LD=
    PROF_USE_CC="${QPRE}prof-use ${QPRE}prof-dir."
    PROF_USE_LD=
elif [ $compiler = CL ]; then
    # Visual Studio
    # _M_IX86_FP is only defined on x86
    [ $ARCH = X86 ] && cpp_check '' '' '_M_IX86_FP >= 1' && define __SSE__
    [ $ARCH = X86_64 ] && define __SSE__
    # As long as the cli application can't link against the dll, the dll can not be pgo'd.
    # pgds are link flag specific and the -dll flag for creating the dll makes it unshareable with the cli
    PROF_GEN_CC="-GL"
    PROF_GEN_LD="-LTCG:PGINSTRUMENT"
    PROF_USE_CC="-GL"
    PROF_USE_LD="-LTCG:PGOPTIMIZE"
else
    PROF_GEN_CC="-fprofile-generate"
    PROF_GEN_LD="-fprofile-generate"
    PROF_USE_CC="-fprofile-use"
    PROF_USE_LD="-fprofile-use"
fi

# generate config files

cat > config.mak << EOF
SRCPATH=$SRCPATH
prefix=$prefix
exec_prefix=$exec_prefix
bindir=$bindir
libdir=$libdir
includedir=$includedir
SYS_ARCH=$ARCH
SYS=$SYS
CC=$CC
CFLAGS=$CFLAGS
COMPILER=$compiler
COMPILER_STYLE=$compiler_style
DEPMM=$DEPMM
DEPMT=$DEPMT
LD=$LD
LDFLAGS=$LDFLAGS
LIBDAVS2=$LIBDAVS2
AR=$AR
RANLIB=$RANLIB
STRIP=$STRIP
INSTALL=$INSTALL
AS=$AS
ASFLAGS=$ASFLAGS
RC=$RC
RCFLAGS=$RCFLAGS
EXE=$EXE
HAVE_GETOPT_LONG=$HAVE_GETOPT_LONG
DEVNULL=$DEVNULL
PROF_GEN_CC=$PROF_GEN_CC
PROF_GEN_LD=$PROF_GEN_LD
PROF_USE_CC=$PROF_USE_CC
PROF_USE_LD=$PROF_USE_LD
HAVE_OPENCL=$opencl
EOF

if [ $compiler_style = MS ]; then
    echo '%.o: %.c' >> config.mak
    echo '	$(CC) $(CFLAGS) -c -Fo$@ $<' >> config.mak
fi

if [ "$cli" = "yes" ]; then
    echo 'default: cli' >> config.mak
    echo 'install: install-cli' >> config.mak
fi

if [ "$shared" = "yes" ]; then
    API=$(grep '#define DAVS2_BUILD' < ${BUILDPATH}/davs2_config.h | sed 's/^.* \([1-9][0-9]*\).*$/\1/')
    if [ "$SYS" = "WINDOWS" -o "$SYS" = "CYGWIN" ]; then
        echo "SONAME=libdavs2-$API.dll" >> config.mak
        if [ $compiler_style = MS ]; then
            echo 'IMPLIBNAME=libdavs2.dll.lib' >> config.mak
            # GNU ld on windows defaults to exporting all global functions if there are no explicit __declspec(dllexport) declarations
            # MSVC link does not act similarly, so it is required to make an export definition out of davs2.h and use it at link time
            echo "SOFLAGS=-dll -def:davs2.def -implib:\$(IMPLIBNAME) $SOFLAGS" >> config.mak
            echo "EXPORTS" > davs2.def
            # export API functions
            grep "^\(int\|void\|davs2_t\).*davs2" ${SRCPATH}/davs2.h | sed -e "s/.*\(davs2.*\)(.*/\1/;s/open/open_$API/g" >> davs2.def
            # export API variables/data. must be flagged with the DATA keyword
            grep "extern.*davs2" ${SRCPATH}/davs2.h | sed -e "s/.*\(davs2\w*\)\W.*/\1 DATA/;" >> davs2.def
        else
            echo 'IMPLIBNAME=libdavs2.dll.a' >> config.mak
            echo "SOFLAGS=-shared -Wl,--out-implib,\$(IMPLIBNAME) $SOFLAGS" >> config.mak
        fi
    elif [ "$SYS" = "MACOSX" ]; then
        echo "SOSUFFIX=dylib" >> config.mak
        echo "SONAME=libdavs2.$API.dylib" >> config.mak
        echo "SOFLAGS=-shared -dynamiclib -Wl,-single_module -Wl,-read_only_relocs,suppress -install_name \$(DESTDIR)\$(libdir)/\$(SONAME) $SOFLAGS" >> config.mak
    elif [ "$SYS" = "SunOS" ]; then
        echo "SOSUFFIX=so" >> config.mak
        echo "SONAME=libdavs2.so.$API" >> config.mak
        echo "SOFLAGS=-shared -Wl,-h,\$(SONAME) $SOFLAGS" >> config.mak
    else
        echo "SOSUFFIX=so" >> config.mak
        echo "SONAME=libdavs2.so.$API" >> config.mak
        echo "SOFLAGS=-shared -Wl,-soname,\$(SONAME) $SOFLAGS" >> config.mak
    fi
    echo 'default: lib-shared' >> config.mak
    echo 'install: install-lib-shared' >> config.mak
fi

if [ "$static" = "yes" ]; then
    echo 'default: lib-static' >> config.mak
    echo 'install: install-lib-static' >> config.mak
fi

echo "LDFLAGSCLI = $LDFLAGSCLI" >> config.mak
echo "CLI_LIBDAVS2 = $CLI_LIBDAVS2" >> config.mak

cat > davs2.pc << EOF
prefix=$prefix
exec_prefix=$exec_prefix
libdir=$libdir
includedir=$includedir

Name: davs2
Description: AVS2 (IEEE 1857.4) decoder library
Version: $(grep POINTVER < davs2_config.h | sed -e 's/.* "//; s/".*//')
Libs: -L$libdir -ldavs2 $([ "$shared" = "yes" ] || echo $libpthread $libm $libdl)
Libs.private: $([ "$shared" = "yes" ] && echo $libpthread $libm $libdl)
Cflags: -I$includedir
EOF

filters="crop select_every"
gpl_filters=""
[ $gpl = yes ] && filters="$filters $gpl_filters"

cat > conftest.log <<EOF
platform:      $ARCH
byte order:    $CPU_ENDIAN
system:        $SYS
cli:           $cli
libdavs2:      $cli_libdavs2
shared:        $shared
static:        $static
asm:           $asm
interlaced:    $interlaced
gpl:           $gpl
thread:        $thread
opencl:        $opencl
filters:       $filters
lto:           $lto
debug:         $debug
gprof:         $gprof
strip:         $strip
PIC:           $pic
bit depth:     $bit_depth
chroma format: $chroma_format
EOF

echo >> config.log
cat conftest.log >> config.log
cat conftest.log

# [ "$SRCPATH" != "." ] && ln -sf ${SRCPATH}/Makefile ./Makefile
mkdir -p common/{aarch64,arm,ppc,x86,vec} test

echo
echo "You can run 'make' or 'make fprofiled' now."

